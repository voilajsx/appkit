/**
 * FBCA Backend API Server with AppKit integration
 * @module {{projectName}}/server
 * @file src/api/server.ts
 *
 * @llm-rule WHEN: Creating backend APIs with Feature-Based Component Architecture
 * @llm-rule AVOID: Using without AppKit modules - breaks structured logging and error handling
 * @llm-rule NOTE: Auto-discovers features in features/ directory using naming convention
 */

import express from 'express';
import cors from 'cors';
import { loggerClass } from '@voilajsx/appkit/logger';
import { errorClass } from '@voilajsx/appkit/error';
import { configClass } from '@voilajsx/appkit/config';
import { createApiRouter } from './lib/router.js';

// Initialize AppKit modules following the pattern
const logger = loggerClass.get('server');
const error = errorClass.get();
const config = configClass.get();

const app = express();
const PORT = config.get('server.port', process.env.PORT || 3000);

// Middleware (following AppKit recommended order)
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Request logging middleware
app.use((req, res, next) => {
  logger.info('Incoming request', {
    method: req.method,
    url: req.url,
    userAgent: req.get('User-Agent'),
    ip: req.ip
  });
  next();
});

// Health check with AppKit integration
app.get('/health', error.asyncRoute(async (req, res) => {
  logger.info('Health check requested');

  const healthData = {
    status: 'ok',
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    environment: config.get('app.environment', 'development')
  };

  res.json(healthData);
}));

// Initialize server with async setup
async function startServer() {
  try {
    logger.info('Initializing server...');

    // API routes with auto-discovery
    app.use('/api', await createApiRouter());

    // 404 handler
    app.use((req, res) => {
      logger.warn('Route not found', {
        method: req.method,
        url: req.url
      });
      res.status(404).json({
        error: 'Route not found',
        path: req.url
      });
    });

    // AppKit error handling middleware (ALWAYS LAST)
    app.use(error.handleErrors());

    app.listen(PORT, () => {
      logger.info(`🚀 Server running on http://localhost:${PORT}`);
      logger.info(`📚 API routes: http://localhost:${PORT}/api`);
      logger.info('Server initialization completed successfully');
    });

  } catch (err: any) {
    logger.error('Failed to start server', { error: err });
    console.error('❌ Server startup failed:', err.message);
    process.exit(1);
  }
}

startServer();